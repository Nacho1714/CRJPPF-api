generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model directorate {
  directorate_id         Int                      @id @default(autoincrement())
  name                   String                   @unique @db.VarChar(40)
  is_active              Boolean                  @default(true)
  created_at             DateTime                 @default(now()) @db.Timestamp(6)
  updated_at             DateTime                 @default(now()) @db.Timestamp(6)
  directorate_has_sector directorate_has_sector[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model directorate_has_sector {
  destination_id Int         @id @default(autoincrement())
  directorate_fk Int
  sector_fk      Int
  name           String?     @unique @db.VarChar(80)
  level          String?     @db.Char(1)
  created_at     DateTime    @default(now()) @db.Timestamp(6)
  updated_at     DateTime    @default(now()) @db.Timestamp(6)
  directorate    directorate @relation(fields: [directorate_fk], references: [directorate_id], onDelete: NoAction, onUpdate: NoAction)
  sector         sector      @relation(fields: [sector_fk], references: [sector_id], onDelete: NoAction, onUpdate: NoAction)
  employee       employee[]
  visitor        visitor[]

  @@unique([directorate_fk, sector_fk], map: "unique_directorate_sector")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model employee {
  employee_id            Int                     @id @default(autoincrement())
  position_fk            Int?
  destination_fk         Int?
  name                   String                  @db.VarChar(100)
  last_name              String                  @db.VarChar(100)
  is_active              Boolean                 @default(true)
  created_at             DateTime                @default(now()) @db.Timestamp(6)
  updated_at             DateTime                @default(now()) @db.Timestamp(6)
  directorate_has_sector directorate_has_sector? @relation(fields: [destination_fk], references: [destination_id], onDelete: NoAction, onUpdate: NoAction)
  position               position?               @relation(fields: [position_fk], references: [position_id], onDelete: NoAction, onUpdate: NoAction)
  visitor                visitor[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model position {
  position_id Int        @id @default(autoincrement())
  name        String     @unique @db.VarChar(70)
  is_active   Boolean    @default(true)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  employee    employee[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model sector {
  sector_id              Int                      @id @default(autoincrement())
  name                   String                   @unique @db.VarChar(40)
  is_active              Boolean                  @default(true)
  created_at             DateTime                 @default(now()) @db.Timestamp(6)
  updated_at             DateTime                 @default(now()) @db.Timestamp(6)
  directorate_has_sector directorate_has_sector[]
}

model session_failed {
  session_failed_id Int      @id @default(autoincrement())
  user_name         String   @db.Char(4)
  created_at        DateTime @default(now()) @db.Timestamp(6)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model user {
  user_id    Int       @id @default(autoincrement())
  name       String    @db.VarChar(100)
  last_name  String    @db.VarChar(100)
  profile    String    @unique @db.Char(4)
  password   String    @db.VarChar(255)
  last_login DateTime? @db.Timestamp(6)
  is_active  Boolean   @default(true)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  visitor    visitor[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model visitor {
  visitor_id             Int                    @id @default(autoincrement())
  user_fk                Int
  employee_fk            Int
  destination_fk         Int
  name                   String                 @db.VarChar(100)
  last_name              String                 @db.VarChar(100)
  document_type          document_options
  document_number        String                 @db.VarChar(20)
  image                  String?                @db.VarChar(50)
  note                   String?
  entry                  DateTime               @default(now()) @db.Timestamp(6)
  exit                   DateTime?              @db.Timestamp(6)
  created_at             DateTime               @default(now()) @db.Timestamp(6)
  updated_at             DateTime               @default(now()) @db.Timestamp(6)
  directorate_has_sector directorate_has_sector @relation(fields: [destination_fk], references: [destination_id], onDelete: NoAction, onUpdate: NoAction)
  employee               employee               @relation(fields: [employee_fk], references: [employee_id], onDelete: NoAction, onUpdate: NoAction)
  user                   user                   @relation(fields: [user_fk], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

enum document_options {
  DNI
  LE
  LC
  PAS
}
